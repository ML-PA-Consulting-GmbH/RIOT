From d4949b4af368474efd23d3ada4eaab7db13c43ae Mon Sep 17 00:00:00 2001
From: Koen Zandberg <koen@bergzand.net>
Date: Mon, 29 Mar 2021 10:44:29 +0200
Subject: [PATCH 1/6] encoder: Make return values consistent with documentation

---
 include/nanocbor/nanocbor.h | 35 +++++++++++++++++++++++++----------
 src/encoder.c               | 18 +++++++++---------
 2 files changed, 34 insertions(+), 19 deletions(-)

diff --git a/include/nanocbor/nanocbor.h b/include/nanocbor/nanocbor.h
index af994a8..2da09ad 100644
--- a/include/nanocbor/nanocbor.h
+++ b/include/nanocbor/nanocbor.h
@@ -518,14 +518,12 @@ void nanocbor_encoder_init(nanocbor_encoder_t *enc,
  * @ref nanocbor_encoder_init into account, it only returns the number of bytes
  * the current CBOR structure would take up.
  *
- * @param[in]   enc Encoder context
+ * @param[in]   enc     Encoder context
  *
- * @return          Length of the encoded structure
+ * @return              Length of the encoded structure
  */
 size_t nanocbor_encoded_len(nanocbor_encoder_t *enc);
 
-
-
 /**
  * @brief Write a CBOR boolean value into a buffer
  *
@@ -533,6 +531,7 @@ size_t nanocbor_encoded_len(nanocbor_encoder_t *enc);
  * @param[in]   content Boolean value to write
  *
  * @return              Number of bytes written
+ * @return              Negative on error
  */
 int nanocbor_fmt_bool(nanocbor_encoder_t *enc, bool content);
 
@@ -542,7 +541,8 @@ int nanocbor_fmt_bool(nanocbor_encoder_t *enc, bool content);
  * @param[in]   enc     Encoder context
  * @param[in]   num     unsigned integer to write
  *
- * @return  number of bytes written
+ * @return              number of bytes written
+ * @return              Negative on error
  */
 int nanocbor_fmt_uint(nanocbor_encoder_t *enc, uint64_t num);
 
@@ -552,7 +552,8 @@ int nanocbor_fmt_uint(nanocbor_encoder_t *enc, uint64_t num);
  * @param[in]   enc     Encoder context
  * @param[in]   num     tag value to write into the buffer
  *
- * @return  number of bytes written
+ * @return              number of bytes written
+ * @return              Negative on error
  */
 int nanocbor_fmt_tag(nanocbor_encoder_t *enc, uint64_t num);
 
@@ -565,6 +566,7 @@ int nanocbor_fmt_tag(nanocbor_encoder_t *enc, uint64_t num);
  * @param[in]   num     unsigned integer to write
  *
  * @return              number of bytes written
+ * @return              Negative on error
  */
 int nanocbor_fmt_int(nanocbor_encoder_t *enc, int64_t num);
 
@@ -579,6 +581,7 @@ int nanocbor_fmt_int(nanocbor_encoder_t *enc, int64_t num);
  * @param[in]   len     Length of the byte string
  *
  * @return              number of bytes written
+ * @return              Negative on error
  */
 int nanocbor_fmt_bstr(nanocbor_encoder_t *enc, size_t len);
 
@@ -593,6 +596,7 @@ int nanocbor_fmt_bstr(nanocbor_encoder_t *enc, size_t len);
  * @param[in]   len     Length of the text string
  *
  * @return              number of bytes written
+ * @return              Negative on error
  */
 int nanocbor_fmt_tstr(nanocbor_encoder_t *enc, size_t len);
 
@@ -603,7 +607,8 @@ int nanocbor_fmt_tstr(nanocbor_encoder_t *enc, size_t len);
  * @param[in]   str     byte string to encode
  * @param[in]   len     Length of the string
  *
- * @return              number of bytes written
+ * @return              NANOCBOR_OK if the string fits
+ * @return              Negative on error
  */
 int nanocbor_put_bstr(nanocbor_encoder_t *enc, const uint8_t *str, size_t len);
 
@@ -613,7 +618,8 @@ int nanocbor_put_bstr(nanocbor_encoder_t *enc, const uint8_t *str, size_t len);
  * @param[in]   enc     Encoder context
  * @param[in]   str     null terminated text string to encode
  *
- * @return              number of bytes written
+ * @return              NANOCBOR_OK if the string fits
+ * @return              Negative on error
  */
 int nanocbor_put_tstr(nanocbor_encoder_t *enc, const char *str);
 
@@ -624,7 +630,8 @@ int nanocbor_put_tstr(nanocbor_encoder_t *enc, const char *str);
  * @param[in]   str     text string to encode
  * @param[in]   len     number of string bytes to copy
  *
- * @return              number of bytes written
+ * @return              NANOCBOR_OK if the string fits
+ * @return              Negative on error
  */
 int nanocbor_put_tstrn(nanocbor_encoder_t *enc, const char *str, size_t len);
 
@@ -639,6 +646,7 @@ int nanocbor_put_tstrn(nanocbor_encoder_t *enc, const char *str, size_t len);
  * @param[in]   len     Number of items in the array
  *
  * @return              Number of bytes written
+ * @return              Negative on error
  */
 int nanocbor_fmt_array(nanocbor_encoder_t *enc, size_t len);
 
@@ -653,6 +661,7 @@ int nanocbor_fmt_array(nanocbor_encoder_t *enc, size_t len);
  * @param[in]   len     Number of pairs in the map
  *
  * @return              Number of bytes written
+ * @return              Negative on error
  */
 int nanocbor_fmt_map(nanocbor_encoder_t *enc, size_t len);
 
@@ -662,6 +671,7 @@ int nanocbor_fmt_map(nanocbor_encoder_t *enc, size_t len);
  * @param[in]   enc     Encoder context
  *
  * @return              Number of bytes written
+ * @return              Negative on error
  */
 int nanocbor_fmt_array_indefinite(nanocbor_encoder_t *enc);
 
@@ -671,6 +681,7 @@ int nanocbor_fmt_array_indefinite(nanocbor_encoder_t *enc);
  * @param[in]   enc     Encoder context
  *
  * @return              Number of bytes written
+ * @return              Negative on error
  */
 int nanocbor_fmt_map_indefinite(nanocbor_encoder_t *enc);
 
@@ -680,6 +691,7 @@ int nanocbor_fmt_map_indefinite(nanocbor_encoder_t *enc);
  * @param[in]   enc     Encoder context
  *
  * @return              Number of bytes written
+ * @return              Negative on error
  */
 int nanocbor_fmt_end_indefinite(nanocbor_encoder_t *enc);
 
@@ -688,7 +700,8 @@ int nanocbor_fmt_end_indefinite(nanocbor_encoder_t *enc);
  *
  * @param[in]   enc     Encoder context
  *
- * @return              Number of bytes written
+ * @return              NANOCBOR_OK
+ * @return              Negative on error
  */
 int nanocbor_fmt_null(nanocbor_encoder_t *enc);
 
@@ -699,6 +712,7 @@ int nanocbor_fmt_null(nanocbor_encoder_t *enc);
  * @param[in]   num     Floating point to encode
  *
  * @return              Number of bytes written
+ * @return              Negative on error
  */
 int nanocbor_fmt_float(nanocbor_encoder_t *enc, float num);
 
@@ -709,6 +723,7 @@ int nanocbor_fmt_float(nanocbor_encoder_t *enc, float num);
  * @param[in]   num     Floating point to encode
  *
  * @return              Number of bytes written
+ * @return              Negative on error
  */
 int nanocbor_fmt_double(nanocbor_encoder_t *enc, double num);
 
diff --git a/src/encoder.c b/src/encoder.c
index 3b5abc5..cdb26c2 100644
--- a/src/encoder.c
+++ b/src/encoder.c
@@ -37,14 +37,15 @@ size_t nanocbor_encoded_len(nanocbor_encoder_t *enc)
 static int _fits(nanocbor_encoder_t *enc, size_t len)
 {
     enc->len += len;
-    return ((size_t)(enc->end - enc->cur) >= len) ? 0 : -1;
+    return ((size_t)(enc->end - enc->cur) >= len) ? (int)len :
+        NANOCBOR_ERR_END;
 }
 
 static int _fmt_single(nanocbor_encoder_t *enc, uint8_t single)
 {
     int res = _fits(enc, 1);
 
-    if (res == 0) {
+    if (res == 1) {
         *enc->cur++ = single;
     }
     return res;
@@ -86,7 +87,7 @@ static int _fmt_uint64(nanocbor_encoder_t *enc, uint64_t num, uint8_t type)
         }
     }
     int res = _fits(enc, extrabytes + 1);
-    if (res == 0) {
+    if (res > 0) {
         *enc->cur++ = type;
 
         /* NOLINTNEXTLINE: user supplied function */
@@ -133,9 +134,10 @@ static int _put_bytes(nanocbor_encoder_t *enc, const uint8_t *str, size_t len)
 {
     int res = _fits(enc, len);
 
-    if (res == 0) {
+    if (res >= 0) {
         memcpy(enc->cur, str, len);
         enc->cur += len;
+        return NANOCBOR_OK;
     }
     return res;
 }
@@ -251,7 +253,7 @@ static bool _single_in_range(uint8_t exp, uint32_t num)
 static int _fmt_halffloat(nanocbor_encoder_t *enc, uint16_t half)
 {
     int res = _fits(enc, sizeof(uint16_t) + 1);
-    if (res == 0) {
+    if (res > 0) {
         *enc->cur++ = NANOCBOR_MASK_FLOAT | NANOCBOR_SIZE_SHORT;
         *enc->cur++ = (half >> HALF_SIZE/2);
         *enc->cur++ =  half & HALF_MASK_HALF;
@@ -306,13 +308,12 @@ int nanocbor_fmt_float(nanocbor_encoder_t *enc, float num)
     }
     /* normal float */
     int res = _fits(enc, 1 + sizeof(float));
-    if (res == 0) {
+    if (res > 0) {
         *enc->cur++ = NANOCBOR_MASK_FLOAT | NANOCBOR_SIZE_WORD;
         /* NOLINTNEXTLINE: user supplied function */
         uint32_t bnum = NANOCBOR_HTOBE32_FUNC(*unum);
         memcpy(enc->cur, &bnum, sizeof(bnum));
         enc->cur += sizeof(float);
-        res = sizeof(float) + 1;
     }
     return res;
 }
@@ -336,13 +337,12 @@ int nanocbor_fmt_double(nanocbor_encoder_t *enc, double num)
         return nanocbor_fmt_float(enc, *fsingle);
     }
     int res = _fits(enc, 1 + sizeof(double));
-    if (res == 0) {
+    if (res > 0) {
         *enc->cur++ = NANOCBOR_MASK_FLOAT | NANOCBOR_SIZE_LONG;
         /* NOLINTNEXTLINE: user supplied function */
         uint64_t bnum = NANOCBOR_HTOBE64_FUNC(*unum);
         memcpy(enc->cur, &bnum, sizeof(bnum));
         enc->cur += sizeof(double);
-        res = sizeof(double) + 1;
     }
     return res;
 }
-- 
2.25.1

