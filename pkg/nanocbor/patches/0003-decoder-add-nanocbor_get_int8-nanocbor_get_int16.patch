From a30a84d0914cb60637927dec6b3303e93ab71e54 Mon Sep 17 00:00:00 2001
From: Benjamin Valentin <benjamin.valentin@ml-pa.com>
Date: Mon, 17 Aug 2020 17:23:27 +0200
Subject: [PATCH 3/3] decoder: add nanocbor_get_int8() & nanocbor_get_int16()

---
 include/nanocbor/nanocbor.h | 26 ++++++++++++++++++++++++++
 src/decoder.c               | 33 +++++++++++++++++++++++++++++----
 2 files changed, 55 insertions(+), 4 deletions(-)

diff --git a/include/nanocbor/nanocbor.h b/include/nanocbor/nanocbor.h
index e4b940a..1e9630d 100644
--- a/include/nanocbor/nanocbor.h
+++ b/include/nanocbor/nanocbor.h
@@ -240,6 +240,32 @@ int nanocbor_get_uint16(nanocbor_value_t *cvalue, uint16_t *value);
  */
 int nanocbor_get_uint32(nanocbor_value_t *cvalue, uint32_t *value);
 
+/**
+ * @brief Retrieve a signed integer as int8_t from the stream
+ *
+ * The resulting @p value is undefined if the result is an error condition
+ *
+ * @param[in]   cvalue  CBOR value to decode from
+ * @param[out]  value   returned signed integer
+ *
+ * @return              number of bytes read
+ * @return              negative on error
+ */
+int nanocbor_get_int8(nanocbor_value_t *cvalue, int8_t *value);
+
+/**
+ * @brief Retrieve a signed integer as int16_t from the stream
+ *
+ * The resulting @p value is undefined if the result is an error condition
+ *
+ * @param[in]   cvalue  CBOR value to decode from
+ * @param[out]  value   returned signed integer
+ *
+ * @return              number of bytes read
+ * @return              negative on error
+ */
+int nanocbor_get_int16(nanocbor_value_t *cvalue, int16_t *value);
+
 /**
  * @brief Retrieve a signed integer as int32_t from the stream
  *
diff --git a/src/decoder.c b/src/decoder.c
index cd51913..edf5177 100644
--- a/src/decoder.c
+++ b/src/decoder.c
@@ -182,7 +182,8 @@ int nanocbor_get_uint32(nanocbor_value_t *cvalue, uint32_t *value)
     return _get_and_advance_uint32(cvalue, value, NANOCBOR_TYPE_UINT);
 }
 
-int nanocbor_get_int32(nanocbor_value_t *cvalue, int32_t *value)
+static int _get_and_advance_int32(nanocbor_value_t *cvalue, int32_t *value, uint8_t max,
+                                  uint32_t bound)
 {
     int type = nanocbor_get_type(cvalue);
     if (type < 0) {
@@ -191,9 +192,8 @@ int nanocbor_get_int32(nanocbor_value_t *cvalue, int32_t *value)
     int res = NANOCBOR_ERR_INVALID_TYPE;
     if (type == NANOCBOR_TYPE_NINT || type == NANOCBOR_TYPE_UINT) {
         uint32_t intermediate = 0;
-        res = _get_uint64(cvalue, &intermediate,
-                              NANOCBOR_SIZE_WORD, type);
-        if (intermediate > INT32_MAX) {
+        res = _get_uint64(cvalue, &intermediate, max, type);
+        if (intermediate > bound) {
             res = NANOCBOR_ERR_OVERFLOW;
         }
         if (type == NANOCBOR_TYPE_NINT) {
@@ -206,6 +206,31 @@ int nanocbor_get_int32(nanocbor_value_t *cvalue, int32_t *value)
     return _advance_if(cvalue, res);
 }
 
+int nanocbor_get_int8(nanocbor_value_t *cvalue, int8_t *value)
+{
+    int32_t tmp = 0;
+    int res = _get_and_advance_int32(cvalue, &tmp, NANOCBOR_SIZE_BYTE, INT8_MAX);
+
+    *value = tmp;
+
+    return res;
+}
+
+int nanocbor_get_int16(nanocbor_value_t *cvalue, int16_t *value)
+{
+    int32_t tmp = 0;
+    int res = _get_and_advance_int32(cvalue, &tmp, NANOCBOR_SIZE_SHORT, INT16_MAX);
+
+    *value = tmp;
+
+    return res;
+}
+
+int nanocbor_get_int32(nanocbor_value_t *cvalue, int32_t *value)
+{
+    return _get_and_advance_int32(cvalue, value, NANOCBOR_SIZE_WORD, INT32_MAX);
+}
+
 int nanocbor_get_tag(nanocbor_value_t *cvalue, uint32_t *tag)
 {
     return _get_and_advance_uint32(cvalue, tag, NANOCBOR_TYPE_TAG);
-- 
2.25.1

