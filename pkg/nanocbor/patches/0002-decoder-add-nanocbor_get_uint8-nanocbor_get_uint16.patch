From b81f61e0ea2863d29ba85dd9d4d676b1d778327d Mon Sep 17 00:00:00 2001
From: Benjamin Valentin <benjamin.valentin@ml-pa.com>
Date: Mon, 17 Aug 2020 17:12:12 +0200
Subject: [PATCH 2/3] decoder: add nanocbor_get_uint8() & nanocbor_get_uint16()

---
 include/nanocbor/nanocbor.h | 26 ++++++++++++++++++++++++++
 src/decoder.c               | 32 ++++++++++++++++++++++++++++++++
 2 files changed, 58 insertions(+)

diff --git a/include/nanocbor/nanocbor.h b/include/nanocbor/nanocbor.h
index 84d7dd8..e4b940a 100644
--- a/include/nanocbor/nanocbor.h
+++ b/include/nanocbor/nanocbor.h
@@ -201,6 +201,32 @@ int nanocbor_get_type(const nanocbor_value_t *value);
  */
 bool nanocbor_at_end(const nanocbor_value_t *it);
 
+/**
+ * @brief Retrieve a positive integer as uint8_t from the stream
+ *
+ * The resulting @p value is undefined if the result is an error condition
+ *
+ * @param[in]   cvalue  CBOR value to decode from
+ * @param[out]  value   returned positive integer
+ *
+ * @return              number of bytes read
+ * @return              negative on error
+ */
+int nanocbor_get_uint8(nanocbor_value_t *cvalue, uint8_t *value);
+
+/**
+ * @brief Retrieve a positive integer as uint16_t from the stream
+ *
+ * The resulting @p value is undefined if the result is an error condition
+ *
+ * @param[in]   cvalue  CBOR value to decode from
+ * @param[out]  value   returned positive integer
+ *
+ * @return              number of bytes read
+ * @return              negative on error
+ */
+int nanocbor_get_uint16(nanocbor_value_t *cvalue, uint16_t *value);
+
 /**
  * @brief Retrieve a positive integer as uint32_t from the stream
  *
diff --git a/src/decoder.c b/src/decoder.c
index 2dff613..cd51913 100644
--- a/src/decoder.c
+++ b/src/decoder.c
@@ -134,6 +134,28 @@ static int _get_uint64(nanocbor_value_t *cvalue, uint32_t *value, uint8_t max, i
     return (int)(1 + bytes);
 }
 
+static int _get_and_advance_uint8(nanocbor_value_t *cvalue, uint8_t *value,
+                                   int type)
+{
+    uint32_t tmp = 0;
+    int res = _get_uint64(cvalue, &tmp, NANOCBOR_SIZE_BYTE,
+                          type);
+    *value = tmp;
+
+    return _advance_if(cvalue, res);
+}
+
+static int _get_and_advance_uint16(nanocbor_value_t *cvalue, uint16_t *value,
+                                   int type)
+{
+    uint32_t tmp = 0;
+    int res = _get_uint64(cvalue, &tmp, NANOCBOR_SIZE_SHORT,
+                          type);
+    *value = tmp;
+
+    return _advance_if(cvalue, res);
+}
+
 static int _get_and_advance_uint32(nanocbor_value_t *cvalue, uint32_t *value,
                                    int type)
 {
@@ -145,6 +167,16 @@ static int _get_and_advance_uint32(nanocbor_value_t *cvalue, uint32_t *value,
     return _advance_if(cvalue, res);
 }
 
+int nanocbor_get_uint8(nanocbor_value_t *cvalue, uint8_t *value)
+{
+    return _get_and_advance_uint8(cvalue, value, NANOCBOR_TYPE_UINT);
+}
+
+int nanocbor_get_uint16(nanocbor_value_t *cvalue, uint16_t *value)
+{
+    return _get_and_advance_uint16(cvalue, value, NANOCBOR_TYPE_UINT);
+}
+
 int nanocbor_get_uint32(nanocbor_value_t *cvalue, uint32_t *value)
 {
     return _get_and_advance_uint32(cvalue, value, NANOCBOR_TYPE_UINT);
-- 
2.25.1

